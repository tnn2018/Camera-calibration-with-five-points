%   Zhang_InAndOut
%      本m文件用来求解内参数和外参数并优化。
%      求解过称共用10幅图像，每幅图像取5个点。先求出每个图像的单应矩阵，然后把10个单应矩阵和在一起，
%      由V*b=0解出b。再然后用b分解出内参数矩阵A，最后由A和单应矩阵求出外参数矩阵
clc;
clear;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%             从文本文件中读出世界坐标和对应的图像坐标  real data                      %                           
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
% M=load('ER1.txt');M=M';M=reshape(M,3,5);
% m1=load('1.txt');m1=m1';  
% m2=load('2.txt');m2=m2';
% m3=load('3.txt');m3=m3';
% m4=load('4.txt');m4=m4';
% m5=load('5.txt');m5=m5';
% m6=load('6.txt');m6=m6';
% m7=load('7.txt');m7=m7';
% m8=load('8.txt');m8=m8';
% m9=load('9.txt');m9=m9';
% m10=load('10.txt');m10=m10';

% M=load('EE.txt');M=M';M=reshape(M,3,5);
M=load('ER1.txt');M=M';M=reshape(M,3,5);
m1=load('1_1.txt');m1=m1';m1=reshape(m1,3,5);
m2=load('1_2.txt');m2=m2';m2=reshape(m2,3,5);
m3=load('1_3.txt');m3=m3';m3=reshape(m3,3,5);
m4=load('1_4.txt');m4=m4';m4=reshape(m4,3,5);
m5=load('1_5.txt');m5=m5';m5=reshape(m5,3,5); 
m6=load('1_6.txt');m6=m6';m6=reshape(m6,3,5);
m7=load('1_7.txt');m7=m7';m7=reshape(m7,3,5);
m8=load('1_8.txt');m8=m8';m8=reshape(m8,3,5);
m9=load('1_9.txt');m9=m9';m9=reshape(m9,3,5);
m10=load('1_0.txt');m10=m10';m10=reshape(m10,3,5);

% M=load('ER1.txt');M=M';M=reshape(M,3,5);
% m1=load('2_1.txt');m1=m1';m1=reshape(m1,3,5);
% m2=load('2_2.txt');m2=m2';m2=reshape(m2,3,5);
% m3=load('2_3.txt');m3=m3';m3=reshape(m3,3,5);
% m4=load('2_4.txt');m4=m4';m4=reshape(m4,3,5);
% m5=load('2_5.txt');m5=m5';m5=reshape(m5,3,5);
% m6=load('2_6.txt');m6=m6';m6=reshape(m6,3,5);
% m7=load('2_7.txt');m7=m7';m7=reshape(m7,3,5);
% m8=load('2_8.txt');m8=m8';m8=reshape(m8,3,5);
% m9=load('2_9.txt');m9=m9';m9=reshape(m9,3,5);
% m10=load('2_0.txt');m10=m10';m10=reshape(m10,3,5);

% M=load('ER1.txt');M=M';M=reshape(M,3,5);
% m1=load('3_1.txt');m1=m1';m1=reshape(m1,3,5);
% m2=load('3_2.txt');m2=m2';m2=reshape(m2,3,5);
% m3=load('3_3.txt');m3=m3';m3=reshape(m3,3,5);
% m4=load('3_4.txt');m4=m4';m4=reshape(m4,3,5);
% m5=load('3_5.txt');m5=m5';m5=reshape(m5,3,5); 
% m6=load('3_6.txt');m6=m6';m6=reshape(m6,3,5);
% m7=load('3_7.txt');m7=m7';m7=reshape(m7,3,5);
% m8=load('3_8.txt');m8=m8';m8=reshape(m8,3,5);
% m9=load('3_9.txt');m9=m9';m9=reshape(m9,3,5);
% m10=load('3_0.txt');m10=m10';m10=reshape(m10,3,5);

% M=load('ER1.txt');M=M';M=reshape(M,3,5);
% m1=load('4_1.txt');m1=m1';m1=reshape(m1,3,5);
% m2=load('4_2.txt');m2=m2';m2=reshape(m2,3,5);
% m3=load('4_3.txt');m3=m3';m3=reshape(m3,3,5);
% m4=load('4_4.txt');m4=m4';m4=reshape(m4,3,5);
% m5=load('4_5.txt');m5=m5';m5=reshape(m5,3,5); 
% m6=load('4_6.txt');m6=m6';m6=reshape(m6,3,5);
% m7=load('4_7.txt');m7=m7';m7=reshape(m7,3,5);
% m8=load('4_8.txt');m8=m8';m8=reshape(m8,3,5);
% m9=load('4_9.txt');m9=m9';m9=reshape(m9,3,5);
% m10=load('4_0.txt');m10=m10';m10=reshape(m10,3,5);

% M=load('ER1.txt');M=M';M=reshape(M,3,5);
% m1=load('5_1.txt');m1=m1';m1=reshape(m1,3,5);
% m2=load('5_2.txt');m2=m2';m2=reshape(m2,3,5);
% m3=load('5_3.txt');m3=m3';m3=reshape(m3,3,5);
% m4=load('5_4.txt');m4=m4';m4=reshape(m4,3,5);
% m5=load('5_5.txt');m5=m5';m5=reshape(m5,3,5); 
% m6=load('5_6.txt');m6=m6';m6=reshape(m6,3,5);
% m7=load('5_7.txt');m7=m7';m7=reshape(m7,3,5);
% m8=load('5_8.txt');m8=m8';m8=reshape(m8,3,5);
% m9=load('5_9.txt');m9=m9';m9=reshape(m9,3,5);
% m10=load('5_0.txt');m10=m10';m10=reshape(m10,3,5);

% M=load('ER1.txt');M=M';M=reshape(M,3,5);
% m1=load('6_1.txt');m1=m1';m1=reshape(m1,3,5);
% m2=load('6_2.txt');m2=m2';m2=reshape(m2,3,5);
% m3=load('6_3.txt');m3=m3';m3=reshape(m3,3,5);
% m4=load('6_4.txt');m4=m4';m4=reshape(m4,3,5);
% m5=load('6_5.txt');m5=m5';m5=reshape(m5,3,5); 
% m6=load('6_6.txt');m6=m6';m6=reshape(m6,3,5);
% m7=load('6_7.txt');m7=m7';m7=reshape(m7,3,5);
% m8=load('6_8.txt');m8=m8';m8=reshape(m8,3,5);
% m9=load('6_9.txt');m9=m9';m9=reshape(m9,3,5);
% m10=load('6_0.txt');m10=m10';m10=reshape(m10,3,5);

% M=load('ER1.txt');M=M';M=reshape(M,3,5);
% m1=load('7_1.txt');m1=m1';m1=reshape(m1,3,5);
% m2=load('7_2.txt');m2=m2';m2=reshape(m2,3,5);
% m3=load('7_3.txt');m3=m3';m3=reshape(m3,3,5);
% m4=load('7_4.txt');m4=m4';m4=reshape(m4,3,5);
% m5=load('7_5.txt');m5=m5';m5=reshape(m5,3,5); 
% m6=load('7_6.txt');m6=m6';m6=reshape(m6,3,5);
% m7=load('7_7.txt');m7=m7';m7=reshape(m7,3,5);
% m8=load('7_8.txt');m8=m8';m8=reshape(m8,3,5);
% m9=load('7_9.txt');m9=m9';m9=reshape(m9,3,5);
% m10=load('7_0.txt');m10=m10';m10=reshape(m10,3,5);

% M=load('ER1.txt');M=M';M=reshape(M,3,5);
% m1=load('8_1.txt');m1=m1';m1=reshape(m1,3,5);
% m2=load('8_2.txt');m2=m2';m2=reshape(m2,3,5);
% m3=load('8_3.txt');m3=m3';m3=reshape(m3,3,5);
% m4=load('8_4.txt');m4=m4';m4=reshape(m4,3,5);
% m5=load('8_5.txt');m5=m5';m5=reshape(m5,3,5); 
% m6=load('8_6.txt');m6=m6';m6=reshape(m6,3,5);
% m7=load('8_7.txt');m7=m7';m7=reshape(m7,3,5);
% m8=load('8_8.txt');m8=m8';m8=reshape(m8,3,5);
% m9=load('8_9.txt');m9=m9';m9=reshape(m9,3,5);
% m10=load('8_0.txt');m10=m10';m10=reshape(m10,3,5);
% 
% M=load('ER1.txt');M=M';M=reshape(M,3,5);
% m1=load('9_1.txt');m1=m1';m1=reshape(m1,3,5);
% m2=load('9_2.txt');m2=m2';m2=reshape(m2,3,5);
% m3=load('9_3.txt');m3=m3';m3=reshape(m3,3,5);
% m4=load('9_4.txt');m4=m4';m4=reshape(m4,3,5);
% m5=load('9_5.txt');m5=m5';m5=reshape(m5,3,5); 
% m6=load('9_6.txt');m6=m6';m6=reshape(m6,3,5);
% m7=load('9_7.txt');m7=m7';m7=reshape(m7,3,5);
% m8=load('9_8.txt');m8=m8';m8=reshape(m8,3,5);
% m9=load('9_9.txt');m9=m9';m9=reshape(m9,3,5);
% m10=load('9_0.txt');m10=m10';m10=reshape(m10,3,5);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%              仿真实验数据 simulation                   %%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% clc; clear;
% 
% K=[1000 0 800;
%    0 1000 600;
%    0 0 1];
% M=load('EE.txt');
% RR=zeros(3,4,10);
% syms m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 
% for i=1:10
%   A=[20 20 30;
%      20 30 50;
%      60 50 10;
%      20 80 40;
%      10 60 30;
%      50 60 10;
%      80 20 10;
%      30 20 40;
%      10 40 20;
%      40 50 40;] ;
%    T=A';
%    x1=A(i,1);x2=A(i,2);x3=A(i,3);   %%旋转角度  
%    R=rodrigues([x1,x2,x3]);
%    eval(['RR' num2str(i) '=R;'])   
% R1=R(:,1);
% R2=R(:,2);
%  
% m=K*[R1,R2,T(:,i)]*M;
% mk=awgn(m,95,3);
% mk=mk./(ones(3,1)*mk(3,:));
% % m=m./(ones(3,1)*m(3,:));
% % mk-m
% % y2 = awgn(m,1,1); y3 = awgn(m,1,1.5);
% % y4 = awgn(m,1,2); y5 = awgn(m,1,2.5); y6 = awgn(m,1,3);
% 
% % eval(['mk' num2str(i) '=mk;']);
% eval(['m' num2str(i) '=mk;']);
% 
% 
% % eval(['H_' num2str(kk) ' = NaN*ones(3,3);']);
% end

%    RR(:,1:3,1)=RR1; RR(:,1:3,2)=RR2; RR(:,1:3,3)=RR3; RR(:,1:3,4)=RR4; RR(:,1:3,5)=RR5;
%    RR(:,1:3,6)=RR6; RR(:,1:3,7)=RR7; RR(:,1:3,8)=RR8; RR(:,1:3,9)=RR9; RR(:,1:3,10)=RR10;
%    RR(:,4,1)=T(:,1);RR(:,4,2)=T(:,2);RR(:,4,3)=T(:,3);RR(:,4,4)=T(:,4);RR(:,4,5)=T(:,5);
%    RR(:,4,6)=T(:,6);RR(:,4,7)=T(:,7);RR(:,4,8)=T(:,8);RR(:,4,9)=T(:,9);RR(:,4,10)=T(:,10);
%    RR ;  %3*4
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%             将图像坐标归一化，m1--m10变成mm1--mm10             %%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
m11=sum(m1(1,:))/5;
m12=sum(m1(2,:))/5;
s1=sqrt(( (m1(1,1)-m11)^2+(m1(1,2)-m11)^2+(m1(1,3)-m11)^2+(m1(1,4)-m11)^2+(m1(1,5)-m11)^2+(m1(2,1)-m12)^2+(m1(2,2)-m12)^2+(m1(2,3)-m12)^2+(m1(2,4)-m12)^2+(m1(2,5)-m12)^2 )/5);
km1=1.414/s1;
h1=[km1  0   -km1*m11;
    0   km1  -km1*m12;
    0   0       1 ];
mm1=h1*m1;

m21=sum(m2(1,:))/5;
m22=sum(m2(2,:))/5;
s2=sqrt(( (m2(1,1)-m21)^2+(m2(1,2)-m21)^2+(m2(1,3)-m21)^2+(m2(1,4)-m21)^2+(m2(1,5)-m21)^2+(m2(2,1)-m22)^2+(m2(2,2)-m22)^2+(m2(2,3)-m22)^2+(m2(2,4)-m22)^2+(m2(2,5)-m22)^2 )/5);
km2=1.414/s2;
h2=[km2  0   -km2*m21;
    0   km2  -km2*m22;
    0   0       1 ];
mm2=h2*m2;

m31=sum(m3(1,:))/5;
m32=sum(m3(2,:))/5;
s3=sqrt(( (m3(1,1)-m31)^2+(m3(1,2)-m31)^2+(m3(1,3)-m31)^2+(m3(1,4)-m31)^2+(m3(1,5)-m31)^2+(m3(2,1)-m32)^2+(m3(2,2)-m32)^2+(m3(2,3)-m32)^2+(m3(2,4)-m32)^2+(m3(2,5)-m32)^2 )/5);
km3=1.414/s3;
h3=[km3  0   -km3*m31;
    0   km3  -km3*m32;
    0   0       1 ];
mm3=h3*m3;

m41=sum(m4(1,:))/5;
m42=sum(m4(2,:))/5;
s4=sqrt(( (m4(1,1)-m41)^2+(m4(1,2)-m41)^2+(m4(1,3)-m41)^2+(m4(1,4)-m41)^2+(m4(1,5)-m41)^2+(m4(2,1)-m42)^2+(m4(2,2)-m42)^2+(m4(2,3)-m42)^2+(m4(2,4)-m42)^2+(m4(2,5)-m42)^2 )/5);
km4=1.414/s4;
h4=[km4  0   -km4*m41;
    0   km4  -km4*m42;
    0   0       1 ];
mm4=h4*m4;

m51=sum(m5(1,:))/5;
m52=sum(m5(2,:))/5;
s5=sqrt(( (m5(1,1)-m51)^2+(m5(1,2)-m51)^2+(m5(1,3)-m51)^2+(m5(1,4)-m51)^2+(m5(1,5)-m51)^2+(m5(2,1)-m52)^2+(m5(2,2)-m52)^2+(m5(2,3)-m52)^2+(m5(2,4)-m52)^2+(m5(2,5)-m52)^2 )/5);
km5=1.414/s5;
h5=[km5  0   -km5*m51;
    0   km5  -km5*m52;
    0   0       1 ];
mm5=h5*m5;

m61=sum(m6(1,:))/5;
m62=sum(m6(2,:))/5;
s6=sqrt(( (m6(1,1)-m61)^2+(m6(1,2)-m61)^2+(m6(1,3)-m61)^2+(m6(1,4)-m61)^2+(m6(1,5)-m61)^2+(m6(2,1)-m62)^2+(m6(2,2)-m62)^2+(m6(2,3)-m62)^2+(m6(2,4)-m62)^2+(m6(2,5)-m62)^2 )/5);
km6=1.414/s6;
h6=[km6  0   -km6*m61;
    0   km6  -km6*m62;
    0   0       1 ];
mm6=h6*m6;

m71=sum(m7(1,:))/5;
m72=sum(m7(2,:))/5;
s7=sqrt(( (m7(1,1)-m71)^2+(m7(1,2)-m71)^2+(m7(1,3)-m71)^2+(m7(1,4)-m71)^2+(m7(1,5)-m71)^2+(m7(2,1)-m72)^2+(m7(2,2)-m72)^2+(m7(2,3)-m72)^2+(m7(2,4)-m72)^2+(m7(2,5)-m72)^2 )/5);
km7=1.414/s7;
h7=[km7  0   -km7*m71;
    0   km7  -km7*m72;
    0   0       1 ];
mm7=h7*m7;

m81=sum(m8(1,:))/5;
m82=sum(m8(2,:))/5;
s8=sqrt(( (m8(1,1)-m81)^2+(m8(1,2)-m81)^2+(m8(1,3)-m81)^2+(m8(1,4)-m81)^2+(m8(1,5)-m81)^2+(m8(2,1)-m82)^2+(m8(2,2)-m82)^2+(m8(2,3)-m82)^2+(m8(2,4)-m82)^2+(m8(2,5)-m82)^2 )/5);
km8=1.414/s8;
h8=[km8  0   -km8*m81;
    0   km8  -km8*m82;
    0   0       1 ];
mm8=h8*m8;

m91=sum(m9(1,:))/5;
m92=sum(m9(2,:))/5;
s9=sqrt(( (m9(1,1)-m91)^2+(m9(1,2)-m91)^2+(m9(1,3)-m91)^2+(m9(1,4)-m91)^2+(m9(1,5)-m91)^2+(m9(2,1)-m92)^2+(m9(2,2)-m92)^2+(m9(2,3)-m92)^2+(m9(2,4)-m92)^2+(m9(2,5)-m92)^2 )/5);
km9=1.414/s9;
h9=[km9  0   -km9*m91;
    0   km9 -km9*m92;
    0   0       1 ];
mm9=h9*m9;

m101=sum(m10(1,:))/5;
m102=sum(m10(2,:))/5;
s10=sqrt(( (m10(1,1)-m101)^2+(m10(1,2)-m101)^2+(m10(1,3)-m101)^2+(m10(1,4)-m101)^2+(m10(1,5)-m101)^2+(m10(2,1)-m102)^2+(m10(2,2)-m102)^2+(m10(2,3)-m102)^2+(m10(2,4)-m102)^2+(m10(2,5)-m102)^2 )/5);
km10=1.414/s10;
h10=[km10  0   -km10*m101;
    0    km10  -km10*m102;
    0      0       1 ];
mm10=h10*m10;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                        以下求解单应矩阵并解出b                                      %                           
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 

% H1=homography(m1,M);  %求出10幅图像的单应矩阵（优化在homgraphy函数内进行）
% H2=homography(m2,M);
% H3=homography(m3,M);
% H4=homography(m4,M);
% H5=homography(m5,M);
% H6=homography(m6,M);
% H7=homography(m7,M);
% H8=homography(m8,M);
% H9=homography(m9,M);
% H10=homography(m10,M);
% 
% % H1--H10条件数     
% disp(cond(H1));disp(cond(H2));disp(cond(H3));disp(cond(H4));disp(cond(H5));
% disp(cond(H6));disp(cond(H7));disp(cond(H8));disp(cond(H9));disp(cond(H10));

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%      求出10幅图像优化后的单应矩阵（优化在homgraphy函数内进行）
%                      归一化的图像坐标
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% mm1=awgn(mm1,0.001,0.005);
% mm1=mm1./(ones(3,1)*mm1(3,:));
% mm2=awgn(mm2,0.001,0.005);
% mm2=mm2./(ones(3,1)*mm2(3,:));
% mm3=awgn(mm3,0.001,0.005);
% mm3=mm3./(ones(3,1)*mm3(3,:));
% mm4=awgn(mm4,0.001,0.005);
% mm4=mm4./(ones(3,1)*mm4(3,:));
% mm5=awgn(mm5,0.001,0.005);
% mm5=mm5./(ones(3,1)*mm5(3,:));
% mm6=awgn(mm6,0.001,0.005);
% mm6=mm6./(ones(3,1)*mm6(3,:));
% mm7=awgn(mm7,0.001,0.005);
% mm7=mm7./(ones(3,1)*mm7(3,:));
% mm8=awgn(mm8,0.001,0.005);
% mm8=mm8./(ones(3,1)*mm8(3,:));
% mm9=awgn(mm9,0.001,0.005);
% mm9=mm9./(ones(3,1)*mm9(3,:));
% mm10=awgn(mm10,0.001,0.005);
% mm10=mm10./(ones(3,1)*mm10(3,:));

HH1=homography(mm1,M); 
HH2=homography(mm2,M);
HH3=homography(mm3,M);
HH4=homography(mm4,M);
HH5=homography(mm5,M);
HH6=homography(mm6,M);
HH7=homography(mm7,M);
HH8=homography(mm8,M);
HH9=homography(mm9,M);
HH10=homography(mm10,M);
HH1=inv(h1)*HH1;
HH2=inv(h2)*HH2;
HH3=inv(h3)*HH3;
HH4=inv(h4)*HH4;
HH5=inv(h5)*HH5;
HH6=inv(h6)*HH6;
HH7=inv(h7)*HH7;
HH8=inv(h8)*HH8;
HH9=inv(h9)*HH9;
HH10=inv(h10)*HH10;

% HH1--HH10条件数     
% disp(cond(HH1));disp(cond(HH2));disp(cond(HH3));disp(cond(HH4));disp(cond(HH5));
% disp(cond(HH6));disp(cond(HH7));disp(cond(HH8));disp(cond(HH9));disp(cond(HH10));

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%        测试单应矩阵的正确性 归一前                 %%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% disp('测试归一前单应矩阵1： ');
% N1=H1*M;
% N1(1,:)=N1(1,:)./N1(3,:);
% N1(2,:)=N1(2,:)./N1(3,:);
% N1(3,:)=N1(3,:)./N1(3,:);
% disp(N1-m1);

% disp('测试单应矩阵2： ');
% N2=H2*M;
% N2(1,:)=N2(1,:)./N2(3,:);
% N2(2,:)=N2(2,:)./N2(3,:);
% N2(3,:)=N2(3,:)./N2(3,:);
% disp(N2-m2);

% disp('测试单应矩阵3： ');
% N3=H3*M;
% N3(1,:)=N3(1,:)./N3(3,:);
% N3(2,:)=N3(2,:)./N3(3,:);
% N3(3,:)=N3(3,:)./N3(3,:);
% disp(N3-m3);

% disp('测试单应矩阵4： ');
% N4=H4*M;
% N4(1,:)=N4(1,:)./N4(3,:);
% N4(2,:)=N4(2,:)./N4(3,:);
% N4(3,:)=N4(3,:)./N4(3,:);
% disp(N4-m4);

% disp('测试单应矩阵5： ');
% N5=H5*M;
% N5(1,:)=N5(1,:)./N5(3,:);
% N5(2,:)=N5(2,:)./N5(3,:);
% N5(3,:)=N5(3,:)./N5(3,:);
% disp(N5-m5);

% disp('测试单应矩阵6： ');
% N6=H6*M;
% N6(1,:)=N6(1,:)./N6(3,:);
% N6(2,:)=N6(2,:)./N6(3,:);
% N6(3,:)=N6(3,:)./N6(3,:);
% disp(N6-m6);

% disp('测试单应矩阵7： ');
% N7=H7*M;
% N7(1,:)=N7(1,:)./N7(3,:);
% N7(2,:)=N7(2,:)./N7(3,:);
% N7(3,:)=N7(3,:)./N7(3,:);
% disp(N7-m7);

% disp('测试单应矩阵8： ');
% N8=H8*M;
% N8(1,:)=N8(1,:)./N8(3,:);
% N8(2,:)=N8(2,:)./N8(3,:);
% N8(3,:)=N8(3,:)./N8(3,:);
% disp(N8-m8);

% disp('测试单应矩阵9： ');
% N9=H9*M;
% N9(1,:)=N9(1,:)./N9(3,:);
% N9(2,:)=N9(2,:)./N9(3,:);
% N9(3,:)=N9(3,:)./N9(3,:);
% disp(N9-m9);
 
% disp('测试单应矩阵10： ');
% N10=H10*M;
% N10(1,:)=N10(1,:)./N10(3,:);
% N10(2,:)=N10(2,:)./N10(3,:);
% N10(3,:)=N10(3,:)./N10(3,:);
% disp(N10-m10);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%                测试单应矩阵的正确性  归一后                  %%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% disp('测试归一后单应矩阵1： ');
% N1=HH1*M;
% N1(1,:)=N1(1,:)./N1(3,:);
% N1(2,:)=N1(2,:)./N1(3,:);
% N1(3,:)=N1(3,:)./N1(3,:);
% disp(N1-m1);
% 
% disp('测试单应矩阵2： ');
% N2=HH2*M;
% N2(1,:)=N2(1,:)./N2(3,:);
% N2(2,:)=N2(2,:)./N2(3,:);
% N2(3,:)=N2(3,:)./N2(3,:);
% disp(N2-m2);
% 
% disp('测试单应矩阵3： ');
% N3=HH3*M;
% N3(1,:)=N3(1,:)./N3(3,:);
% N3(2,:)=N3(2,:)./N3(3,:);
% N3(3,:)=N3(3,:)./N3(3,:);
% disp(N3-m3);
% 
% disp('测试单应矩阵4： ');
% N4=HH4*M;
% N4(1,:)=N4(1,:)./N4(3,:);
% N4(2,:)=N4(2,:)./N4(3,:);
% N4(3,:)=N4(3,:)./N4(3,:);
% disp(N4-m4);
% 
% disp('测试单应矩阵5： ');
% N5=HH5*M;
% N5(1,:)=N5(1,:)./N5(3,:);
% N5(2,:)=N5(2,:)./N5(3,:);
% N5(3,:)=N5(3,:)./N5(3,:);
% disp(N5-m5);
% 
% disp('测试单应矩阵6： ');
% N6=HH6*M;
% N6(1,:)=N6(1,:)./N6(3,:);
% N6(2,:)=N6(2,:)./N6(3,:);
% N6(3,:)=N6(3,:)./N6(3,:);
% disp(N6-m6);
% 
% disp('测试单应矩阵7： ');
% N7=HH7*M;
% N7(1,:)=N7(1,:)./N7(3,:);
% N7(2,:)=N7(2,:)./N7(3,:);
% N7(3,:)=N7(3,:)./N7(3,:);
% disp(N7-m7);
% 
% disp('测试单应矩阵8： ');
% N8=HH8*M;
% N8(1,:)=N8(1,:)./N8(3,:);
% N8(2,:)=N8(2,:)./N8(3,:);
% N8(3,:)=N8(3,:)./N8(3,:);
% disp(N8-m8);
% 
% disp('测试单应矩阵9： ');
% N9=HH9*M;
% N9(1,:)=N9(1,:)./N9(3,:);
% N9(2,:)=N9(2,:)./N9(3,:);
% N9(3,:)=N9(3,:)./N9(3,:);
% disp(N9-m9);
% 
% disp('测试单应矩阵10： ');
% N10=HH10*M;
% N10(1,:)=N10(1,:)./N10(3,:);
% N10(2,:)=N10(2,:)./N10(3,:);
% N10(3,:)=N10(3,:)./N10(3,:);
% disp(N10-m10);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
H=ones(3,3,10);   %把10个单应矩阵合成一个三维的矩阵（方便循环化操作）
H(:,:,1)=HH1;H(:,:,2)=HH2;H(:,:,3)=HH3;H(:,:,4)=HH4;H(:,:,5)=HH5;
H(:,:,6)=HH6;H(:,:,7)=HH7;H(:,:,8)=HH8;H(:,:,9)=HH9;H(:,:,10)=HH10;

V=ones(20,6);           %V*b=0  20，6
for i=1:10              %求V
    V(2*i-1,:)=[H(1,1,i)*H(1,2,i) H(1,1,i)*H(2,2,i)+H(2,1,i)*H(1,2,i) H(2,1,i)*H(2,2,i) H(3,1,i)*H(1,2,i)+H(1,1,i)*H(3,2,i) H(3,1,i)*H(2,2,i)+H(2,1,i)*H(3,2,i) H(3,1,i)*H(3,2,i)];
    p1=[H(1,1,i)^2 2*H(2,1,i)*H(1,1,i) H(2,1,i)^2 2*H(3,1,i)*H(1,1,i) 2*H(3,1,i)*H(2,1,i) H(3,1,i)^2];
    p2=[H(1,2,i)^2 2*H(2,2,i)*H(1,2,i) H(2,2,i)^2 2*H(3,2,i)*H(1,2,i) 2*H(3,2,i)*H(2,2,i) H(3,2,i)^2];
    V(2*i,:)=p2-p1;
end;

%%%%%%%对（20,7）进行归一化%%%%%%%%
% disp('归一后的V');
% z= mean(V,1);
% z1=mean( abs(V(:,1)-z(1)) );
% z2=mean( abs(V(:,2)-z(2)) );
% z3=mean( abs(V(:,3)-z(3)) );
% z4=mean( abs(V(:,4)-z(4)) );
% z5=mean( abs(V(:,5)-z(5)) );
% z6=mean( abs(V(:,6)-z(6)) );
% Hnorm=zeros(7,7);
% Hnorm(1,1)=1/z1;
% Hnorm(2,2)=1/z2;
% Hnorm(3,3)=1/z3;
% Hnorm(4,4)=1/z4;
% Hnorm(5,5)=1/z5;
% Hnorm(6,6)=1/z6;
% Hnorm(7,7)=1; 
% Hnorm(7,:)=[-z(1)/z1,-z(2)/z2,-z(3)/z3,-z(4)/z4,-z(5)/z5 ,-z(6)/z6,1];
% Hnorm;
% hnorm=zeros(7,7);
% hnorm(1,1)=z1;
% hnorm(2,2)=z2;
% hnorm(3,3)=z3;
% hnorm(4,4)=z4;
% hnorm(5,5)=z5;
% hnorm(6,6)=z6;
% hnorm(7,7)=1;
% hnorm(7,:)=[z(1),z(2),z(3),z(4),z(5),z(6),1];
% hnorm;
% V0=ones(20,7);
% V0(:,1:6)=V;
% V1=V0*Hnorm;
% disp('cond(V)=');
% cond(V)
% disp('cond(V1)=');
% cond(V1)
% [u s v]=svd(-V1); %%[u s v]=svd(-V1); 仿真数据用-V1
% b1=v(:,7);
% b=Hnorm*b1

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% disp('V的条件数是：');
% cond(V)
[u , ~, v]=svd(-V); %%%%[u s v]=svd(-V); 有时数据用-V
b=v(:,6);
% disp('求得的b为: ')
% format long
% disp(b);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                          以下分解内参数矩阵并优化                                    %                           
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
% 蔡老师代码
% [UUD,DDD] = svd(VV'*VV);
% BBB = [ UUD(1,6) UUD(2,6) UUD(3,6) UUD(4,6) UUD(5,6) UUD(6,6) ];
% BB = [ UUD(1,6) UUD(2,6) UUD(4,6); UUD(2,6) UUD(3,6) UUD(5,6); UUD(4,6) UUD(5,6) UUD(6,6)];
% W=inv(BB);
% W=W/W(3,3);
% u0(1,ll)=W(1,3);
% v0(1,ll)=W(2,3);
% fv(1,ll)=sqrt(W(2,2)-v0(1,ll)^2);
% s(1,ll)=(W(1,2)-u0(1,ll)*v0(1,ll))/fv(1,ll);
% fu(1,ll)=sqrt(W(1,1)-s(1,ll)^2-u0(1,ll)^2);
% KK = inv(chol(BB));
% KK = KK./KK(3,3);
% H11 = [ss1 tt1; mm1 nn1; 1 0];

% 版本3  最简
B = [ b(1) b(2) b(4); b(2) b(3) b(5); b(4) b(5) b(6)];
BB= chol(B,'lower');
BB=BB/BB(3,3);
BBB=inv(BB);
BBB=BBB/BBB(3,3);
K=BBB';
kx=K(1,1);
ks=K(1,2);
ky=K(2,2);
u0=K(1,3);
v0=K(2,3);

% %  版本2  未用chol()
% B = [ b(1) b(2) b(4); b(2) b(3) b(5); b(4) b(5) b(6)];
% W=inv(B);
% W=W/W(3,3);
% u0=W(1,3);
% v0=W(2,3); 
% ky=sqrt(W(2,2)-v0^2);
% ks=(W(1,2)-u0*v0)/ky;
% kx=sqrt(W(1,1)-ks^2-u0^2);

% % %  版本1  复杂计算，未用chol()函数和求逆       
% v0=(b(2)*b(4)-b(1)*b(5))/(b(1)*b(3)-b(2)^2);  
% s=(b(6)-(b(4)^2+(b(2)*b(4)-b(1)*b(5))/(b(1)*b(3)-b(2)^2)*(b(2)*b(4)-b(1)*b(5)))/b(1)); %比例因子的平方s'
% kx=sqrt(s/b(1));  
% ky=sqrt((s*b(1))/(b(1)*b(3)-b(2)^2));
% ks=-(b(2)*kx^2*ky)/s;  %垂直度 
% u0=ks*v0/ky-b(4)*kx^2/s;  %做了修改

A1=[kx ks u0;0 ky v0;0 0 1];  %求出内参数矩阵
disp('求得的内参数矩阵为：');
disp(A1);
A=A1;

mp=ones(3,5,10);                %图像坐标矩阵（合成三维形式，方便循环操作）
mp(:,:,1)=m1; mp(:,:,2)=m2; mp(:,:,3)=m3; mp(:,:,4)=m4; mp(:,:,5)=m5;
mp(:,:,6)=m6; mp(:,:,7)=m7; mp(:,:,8)=m8; mp(:,:,9)=m9; mp(:,:,10)=m10;
mp;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                       以下求解外参数矩阵                            %                           
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
% for i=1:10                  %10幅图像
%         s=(1/norm(inv(A)*H(:,1,i))+1/norm(inv(A)*H(:,2,i)))/2;   
%         r1=s*inv(A)*H(:,1,i);
%         r2=s*inv(A)*H(:,2,i);
%         T=s*inv(A)*H(:,3,i);
%         r3=-cross(r1,r2);
%         RLL=[r1,r2,r3];
%         [U,S,V] = svd(RLL);    %保证旋转矩阵为标准正交矩阵
%         RL=U*V'; 
%         
%         Ra=[RL(:,1),RL(:,2),T]; 
%         Rb=[-RL(:,1),-RL(:,2),-T]; 
%         UVa=A*Ra*M;
%         resa=mp(:,:,i)-UVa;
%         resa=[resa(1,:),resa(2,:)];
%         UVb=A*Rb*M;
%         resb=mp(:,:,i)-UVb;
%         resb=[resb(1,:),resb(2,:)];
%         if resa >resb
%              eval(['R' num2str(i) '=Rb;'])     % 3*3 
%              RTb=[Rb(:,1:2),r3,Rb(:,3) ;0 0 0 1];   
%              eval(['RT' num2str(i) '=RTb;']);    % 4*4    
%         else
%              eval(['R' num2str(i) '=Ra;']);      % 3*3 
%              RTa=[Ra(:,1:2),r3,Ra(:,3) ;0 0 0 1]; 
%              eval(['RT' num2str(i) '=RTa;']);    % 4*4   
%         end       
% end 

for i=1:10                     %10幅图像
        s=(1/norm(inv(A)*H(:,1,i))+1/norm(inv(A)*H(:,2,i)))/2;   
        r1=s*inv(A)*H(:,1,i);
        r2=s*inv(A)*H(:,2,i);
        T=s*inv(A)*H(:,3,i);
        r3=cross(r1,r2);
        RLL=[r1,r2,r3];
        [U,S,V] = svd(RLL);    %保证旋转矩阵
        RL=U*V';              %为标准正交矩阵
        R=[RL(:,1),RL(:,2),T];   
        eval(['R' num2str(i) '=R;']);      % 3*3 
        eval(['T' num2str(i) '=RL(:,3);']);    % 4*4       
end 
  R(:,:,1)=R1; R(:,:,2)=R2; R(:,:,3)=R3; R(:,:,4)=R4; R(:,:,5)=R5;
  R(:,:,6)=R6; R(:,:,7)=R7; R(:,:,8)=R8; R(:,:,9)=R9; R(:,:,10)=R10;
  T(:,:,1)=T1; T(:,:,2)=T2; T(:,:,3)=T3; T(:,:,4)=T4; T(:,:,5)=T5;
  T(:,:,6)=T6; T(:,:,7)=T7; T(:,:,8)=T8; T(:,:,9)=T9; T(:,:,10)=T10;
  MM=zeros(3,5,10);
  for i=1:10
  MM(:,:,i)=A*R(:,:,i)*M;
   if MM(3,1,i)<0
      R(:,:,i)=-R(:,:,i);
   end
  end
  
  RT=zeros(3,4,10);
  for i=1:10
  RT(:,:,i)=[R(:,1:2,i),T(:,:,i),R(:,3,i)]; 
  end
  
  for i=1:10
  MM(:,:,i)=A*R(:,:,i)*M;
  end
%   MM
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                    最终的优化（包括内参数，三个旋转角度，平移向量                    %                           
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
    Rm=[];
    for i=1:10                     %共用了十幅图像          
      r=rodrigues(RT(1:3,1:3,i));         % 6个独立变量外参
      R_new=[r',RT(1:3,4,i)'];
      Rm=[Rm , R_new];      % %行向量
    end
   param3=[Rm,A(1,1),A(1,2),A(1,3),A(2,2),A(2,3)];   %优化内参数，外参数（平移矩阵和三个转角）65
  
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %               验证分解欧拉角的正确性                     %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   num=10;             %图像数目
%   d=[];
% for i=1:10              %下面用来恢复出外参数矩阵
%       R_new=param3( (i-1)*6+1 : (i-1)*6+6 );
%       x1=R_new(1);
%       x2=R_new(2);
%       x3=R_new(3);
%       T=R_new(4:6)'; 
%       rr=[x1 x2 x3];        %%标定包中函数
%       R=rodrigues(rr);          
%       RT=[R(:,1:2),T];
%       d=[d;RT];    % 10个外参矩阵在一起 30*3
% end
%   A=[param3(num*6+1) param3(num*6+2) param3(num*6+3); 0 param3(num*6+4) param3(num*6+5); 0,0,1];
%   D=[];   
% for i=1:10
%     R=d((i-1)*3+1:(i-1)*3+3,:);
%     UV=A*R*M;
%     UV=[UV(1,:)./UV(3,:); UV(2,:)./UV(3,:); UV(3,:)./UV(3,:)];
%     res=mp(:,:,i)-UV;
%     res=[res(1,:),res(2,:)];
% D=[D;res];
% end
%  d
%  D


   options = optimset('LargeScale','on','Algorithm', 'levenberg-marquardt','TolFun',1e-4,'TolX',1e-4,'Display','iter');
   x = lsqnonlin( @fun4, param3, [],[],options, mp, M);
   
   A=[x(6*10+1) x(6*10+2) x(6*10+3); 0 x(6*10+4) x(6*10+5); 0,0,1];
   d=[];
    for i=1:10               %下面用来恢复出外参数矩阵
      R_f=x( (i-1)*6+1 : (i-1)*6+6 );
      x1=R_f(1);
      x2=R_f(2);
      x3=R_f(3);
      T=R_f(4:6)';    
      rr=[x1 x2 x3]';       
      R=rodrigues(rr); 
      RT=[R(:,1:2) , T];
d=[d;RT];        % 10个外参矩阵在一起20*3 
    end
 for i=1:10
    R=d((i-1)*3+1 : (i-1)*3+3,:);
    eval(['R' num2str(i) '=R;']);
 end 
    disp('最终优化过的内参数为');
    disp(A);
  disp('最终优化过的外参数为');
  disp(R1);disp(R2);disp(R3);disp(R4);disp(R5);disp(R6);disp(R7);disp(R8);disp(R9);disp(R10);   

  